/* THIS FILE IS AUTOMATICALLY GENERATED */
/* tslint:disable */
import gql from 'graphql-tag';
import { Injectable } from '@angular/core';
import * as Apollo from 'apollo-angular';
export type Maybe<T> = T | null;


/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
  Date: any,
  /** The `Upload` scalar type represents a file upload. */
  Upload: any,
};




export type AgentIdentifierInputType = {
  partyKind: AgentKind,
  id: Scalars['ID'],
  idScope?: Maybe<CodeValueInputType>,
  idContext?: Maybe<CodeValueInputType>,
};

export enum AgentKind {
  InternalEmployee = 'InternalEmployee',
  ExternalEmployee = 'ExternalEmployee'
}

export type AmountType = {
   __typename?: 'AmountType',
  amount: Scalars['Float'],
  unitOfMeasure: RqmCodeValueType,
};

export type ApiVisibilityType = {
   __typename?: 'ApiVisibilityType',
  originsPrefixes: Scalars['String'],
  originRegexIntranet: Scalars['String'],
};

export type ApplicationIdentifierType = {
   __typename?: 'ApplicationIdentifierType',
  id: Scalars['String'],
  idScope?: Maybe<RqmCodeValueType>,
  idContext?: Maybe<RqmCodeValueType>,
};

export type AppointmentIdentifierType = {
   __typename?: 'AppointmentIdentifierType',
  id: Scalars['String'],
  idScope?: Maybe<RqmCodeValueType>,
  idContext?: Maybe<RqmCodeValueType>,
};

export type AuditTrailType = {
   __typename?: 'AuditTrailType',
  transaction: Array<Maybe<TransactionType>>,
};

export type BciApplicationIdentifierType = {
   __typename?: 'BCIApplicationIdentifierType',
  id: Scalars['String'],
  idScope?: Maybe<BciCodeValueType>,
  idContext?: Maybe<BciCodeValueType>,
};

export type BciCaseCharValType = {
   __typename?: 'BCICaseCharValType',
  name: Scalars['String'],
  value: Scalars['String'],
  valueRange?: Maybe<BciIntervalType>,
  validFor?: Maybe<BciTimeIntervalType>,
};

export type BciCaseClassificationType = {
   __typename?: 'BCICaseClassificationType',
  classification: BciCodeValueType,
};

export type BciCaseIdentifierType = {
   __typename?: 'BCICaseIdentifierType',
  id: Scalars['String'],
  idScope: BciCodeValueType,
  idContext: BciCodeValueType,
};

export type BciCaseItemIdentifierType = {
   __typename?: 'BCICaseItemIdentifierType',
  id: Scalars['String'],
  idScope: BciCodeValueType,
  idContext: BciCodeValueType,
};

export type BciCaseItemType = {
   __typename?: 'BCICaseItemType',
  identifier: Array<Maybe<BciCaseItemIdentifierType>>,
};

export type BciCaseRelationshipType = {
   __typename?: 'BCICaseRelationshipType',
  type: BciCodeValueType,
};

export type BciCaseRoleType = {
   __typename?: 'BCICaseRoleType',
  type: BciCodeValueType,
  partyRole?: Maybe<Array<Maybe<BciCaseRoleType>>>,
  organisationalUnitIdentifier?: Maybe<BciOrganisationalUnitIdentifierType>,
  contactMediumIdentifier?: Maybe<Array<Maybe<BciChoiceContactMediumIdentifierInCaseType>>>,
  logicalResourceIdentifier?: Maybe<Array<Maybe<BciChoiceLogicalResourceIdentifierInCaseType>>>,
};

export type BciCaseType = {
   __typename?: 'BCICaseType',
  targetResolutionTime?: Maybe<Scalars['Date']>,
  targetTechnicalResolutionTime?: Maybe<Scalars['Date']>,
  lastUpdateDate?: Maybe<Scalars['Date']>,
  isClosedOnCreate?: Maybe<Scalars['Date']>,
  isValid?: Maybe<Scalars['Boolean']>,
  wasReopened?: Maybe<Scalars['Boolean']>,
  interactionRole?: Maybe<Array<Maybe<BciCaseRoleType>>>,
  type: BciCodeValueType,
  status?: Maybe<BciStatusType>,
  priority?: Maybe<BciCodeValueType>,
  title: BciNameType,
  description?: Maybe<BciNameType>,
  comment?: Maybe<Array<Maybe<BciCommentType>>>,
  duration: BciTimeIntervalType,
  closureCode?: Maybe<Array<Maybe<BciCodeValueType>>>,
  communicationLanguage?: Maybe<BciLanguageCodeIsoAlpha2Type>,
  relationship?: Maybe<BciCaseRelationshipType>,
  identifier: BciCaseIdentifierType,
  item?: Maybe<Array<Maybe<BciCaseItemType>>>,
  charVal?: Maybe<Array<Maybe<BciCaseCharValType>>>,
  caseClassification: Array<Maybe<BciCaseClassificationType>>,
  channelIdentifier?: Maybe<Array<Maybe<BciChoiceChannelIdentifierInCaseType>>>,
  assignedWorkforce?: Maybe<BciChoiceAssignedWorkforceForCaseType>,
};

export type BciChannelIdentifierType = {
   __typename?: 'BCIChannelIdentifierType',
  id: Scalars['String'],
  idScope: BciCodeValueType,
  idContext: BciCodeValueType,
};

export type BciChoiceAssignedWorkforceForCaseType = {
   __typename?: 'BCIChoiceAssignedWorkforceForCaseType',
  workforceQueueIdentifier: BciWorkforceQueueIdentifierType,
  employeeIdentifier: BciEmployeeIdentifierType,
};

export type BciChoiceBusinessInteractionInCaseType = {
   __typename?: 'BCIChoiceBusinessInteractionInCaseType',
  opportunityIdentifier: BciOpportunityIdentifierType,
  customerProjectIdentifier: BciCustomerProjectIdentifierType,
  taskIdentifier: BciTaskIdentifierType,
  workOrderIdentifier: BciWorkOrderIdentifierType,
  provisioningOrderIdentifier: BciProvisioningOrderIdentifierType,
  caseIdentifier: BciCaseIdentifierType,
  customerOrderIdentifier: BciCustomerOrderIdentifierType,
};

export type BciChoiceChannelIdentifierInCaseType = {
   __typename?: 'BCIChoiceChannelIdentifierInCaseType',
  channelIdentifier: BciChannelIdentifierType,
  salesChannelIdentifier: BciSalesChannelIdentifierType,
};

export type BciChoiceContactMediumIdentifierInCaseType = {
   __typename?: 'BCIChoiceContactMediumIdentifierInCaseType',
  EMailContactIdentifier: BcieMailContactIdentifierType,
  phoneContactIdentifier: BciPhoneContactIdentifierType,
  postalContactIdentifier: BciPostalContactIdentifierType,
};

export type BciChoiceLogicalResourceIdentifierInCaseType = {
   __typename?: 'BCIChoiceLogicalResourceIdentifierInCaseType',
  applicationIdentifier: BciApplicationIdentifierType,
};

export type BciChoicePartyIdentifierInPartyContactType = {
   __typename?: 'BCIChoicePartyIdentifierInPartyContactType',
  personIdentifier: BciPersonIdentifierType,
  organisationIdentifier: BciOrganisationIdentifierType,
};

export type BciChoicePartyRoleInCaseType = {
   __typename?: 'BCIChoicePartyRoleInCaseType',
  employeeIdentifier: BciEmployeeIdentifierType,
  customerIdentifier: BciCustomerIdentifierType,
  registeredEndUserIdentifier: BciRegisteredEndUserIdentifierType,
  visitorIdentifier: BciVisitorIdentifierType,
  serviceDeskPartnerIdentifier: BciServiceDeskPartnerIdentifierType,
};

export type BciClientType = {
   __typename?: 'BciClientType',
  bciUrl: Scalars['String'],
  timeoutInMillis: Scalars['Int'],
};

export type BciCodeValueType = {
   __typename?: 'BCICodeValueType',
  codeSystem?: Maybe<Scalars['String']>,
  codeSystemVersion?: Maybe<Scalars['String']>,
  codeDescription?: Maybe<Scalars['String']>,
  value: Scalars['String'],
  context?: Maybe<Scalars['String']>,
  valueDescription?: Maybe<BciNameType>,
};

export type BciCommentType = {
   __typename?: 'BCICommentType',
  comment: Scalars['String'],
  language: BciLanguageCodeIsoAlpha2Type,
  type: BciCodeValueType,
};

export type BciCustomerIdentifierType = {
   __typename?: 'BCICustomerIdentifierType',
  id: Scalars['String'],
  idScope?: Maybe<BciCodeValueType>,
  idContext?: Maybe<BciCodeValueType>,
};

export type BciCustomerOrderIdentifierType = {
   __typename?: 'BCICustomerOrderIdentifierType',
  id: Scalars['String'],
  idScope?: Maybe<BciCodeValueType>,
  idContext?: Maybe<BciCodeValueType>,
};

export type BciCustomerProjectIdentifierType = {
   __typename?: 'BCICustomerProjectIdentifierType',
  id: Scalars['String'],
  idScope: BciCodeValueType,
  idContext: BciCodeValueType,
};

export type BcieMailContactCharValType = {
   __typename?: 'BCIEMailContactCharValType',
  characteristicName: Scalars['String'],
  value: Scalars['String'],
  validFor?: Maybe<BciTimeIntervalType>,
  valueRange?: Maybe<BciIntervalType>,
};

export type BcieMailContactIdentifierType = {
   __typename?: 'BCIEMailContactIdentifierType',
  id: Scalars['String'],
  idScope?: Maybe<BciCodeValueType>,
  idContext?: Maybe<BciCodeValueType>,
};

export type BcieMailContactType = {
   __typename?: 'BCIEMailContactType',
  EMailAddress: Scalars['String'],
  isPreferred?: Maybe<Scalars['Boolean']>,
  isMarketingAllowed?: Maybe<Scalars['Boolean']>,
  context?: Maybe<Array<Maybe<BciCodeValueType>>>,
  status?: Maybe<BciCodeValueType>,
  validFor?: Maybe<BciTimeIntervalType>,
  trustLevel?: Maybe<BciCodeValueType>,
  identifier?: Maybe<BcieMailContactIdentifierType>,
  partyIdentifier?: Maybe<Array<Maybe<BciChoicePartyIdentifierInPartyContactType>>>,
  charVal?: Maybe<Array<Maybe<BcieMailContactCharValType>>>,
};

export type BciEmployeeIdentifierType = {
   __typename?: 'BCIEmployeeIdentifierType',
  id: Scalars['String'],
  idScope?: Maybe<BciCodeValueType>,
  idContext?: Maybe<BciCodeValueType>,
};

export type BciGeographicAddressIdentifierType = {
   __typename?: 'BCIGeographicAddressIdentifierType',
  id: Scalars['String'],
  idScope: BciCodeValueType,
  idContext: BciCodeValueType,
};

export type BciIntervalType = {
   __typename?: 'BCIIntervalType',
  low: Scalars['String'],
  high: Scalars['String'],
};

export type BciLabelType = {
   __typename?: 'BCILabelType',
  text?: Maybe<Scalars['String']>,
  language: BciLanguageCodeIsoAlpha2Type,
};

export type BciLanguageCodeIsoAlpha2Type = {
   __typename?: 'BCILanguageCodeISOAlpha2Type',
  alpha2Code: Scalars['String'],
  idScope?: Maybe<BciCodeValueType>,
};

export type BciNameType = {
   __typename?: 'BCINameType',
  defaultName: Scalars['String'],
  type?: Maybe<BciCodeValueType>,
  languageName?: Maybe<Array<Maybe<BciLabelType>>>,
};

export type BciOpportunityIdentifierType = {
   __typename?: 'BCIOpportunityIdentifierType',
  id: Scalars['String'],
  idScope: BciCodeValueType,
  idContext: BciCodeValueType,
};

export type BciOrganisationalUnitIdentifierType = {
   __typename?: 'BCIOrganisationalUnitIdentifierType',
  id: Scalars['String'],
  idScope: BciCodeValueType,
  idContext: BciCodeValueType,
};

export type BciOrganisationIdentifierType = {
   __typename?: 'BCIOrganisationIdentifierType',
  id: Scalars['String'],
  idScope?: Maybe<BciCodeValueType>,
  idContext?: Maybe<BciCodeValueType>,
};

export type BciPersonIdentifierType = {
   __typename?: 'BCIPersonIdentifierType',
  id: Scalars['String'],
  idScope?: Maybe<BciCodeValueType>,
  idContext: BciCodeValueType,
};

export type BciPhoneContactCharValType = {
   __typename?: 'BCIPhoneContactCharValType',
  characteristicName: Scalars['String'],
  value: Scalars['String'],
  validFor?: Maybe<BciTimeIntervalType>,
  valueRange?: Maybe<BciIntervalType>,
};

export type BciPhoneContactIdentifierType = {
   __typename?: 'BCIPhoneContactIdentifierType',
  id: Scalars['String'],
  idScope?: Maybe<BciCodeValueType>,
  idContext?: Maybe<BciCodeValueType>,
};

export type BciPhoneContactType = {
   __typename?: 'BCIPhoneContactType',
  isPreferred?: Maybe<Scalars['Boolean']>,
  isMarketingAllowed?: Maybe<Scalars['Boolean']>,
  phoneNumber: BciTelType,
  type?: Maybe<BciCodeValueType>,
  context?: Maybe<Array<Maybe<BciCodeValueType>>>,
  status?: Maybe<BciCodeValueType>,
  validFor?: Maybe<BciTimeIntervalType>,
  trustLevel?: Maybe<BciCodeValueType>,
  identifier?: Maybe<BciPhoneContactIdentifierType>,
  partyIdentifier?: Maybe<Array<Maybe<BciChoicePartyIdentifierInPartyContactType>>>,
  charVal?: Maybe<Array<Maybe<BciPhoneContactCharValType>>>,
};

export type BciPostalContactCharValType = {
   __typename?: 'BCIPostalContactCharValType',
  characteristicName: Scalars['String'],
  value: Scalars['String'],
  validFor?: Maybe<BciTimeIntervalType>,
  valueRange?: Maybe<BciIntervalType>,
};

export type BciPostalContactIdentifierType = {
   __typename?: 'BCIPostalContactIdentifierType',
  id: Scalars['String'],
  idScope?: Maybe<BciCodeValueType>,
  idContext?: Maybe<BciCodeValueType>,
};

export type BciPostalContactType = {
   __typename?: 'BCIPostalContactType',
  isPreferred?: Maybe<Scalars['Boolean']>,
  isMarketingAllowed?: Maybe<Scalars['Boolean']>,
  context?: Maybe<Array<Maybe<BciCodeValueType>>>,
  status?: Maybe<BciCodeValueType>,
  validFor?: Maybe<BciTimeIntervalType>,
  trustLevel?: Maybe<BciCodeValueType>,
  identifier: BciPostalContactIdentifierType,
  partyIdentifier?: Maybe<Array<Maybe<BciChoicePartyIdentifierInPartyContactType>>>,
  charVal?: Maybe<Array<Maybe<BciPostalContactCharValType>>>,
  geographicAddressIdentifier?: Maybe<BciGeographicAddressIdentifierType>,
};

export type BciProvisioningOrderIdentifierType = {
   __typename?: 'BCIProvisioningOrderIdentifierType',
  id: Scalars['String'],
  idScope?: Maybe<BciCodeValueType>,
  idContext?: Maybe<BciCodeValueType>,
};

export type BciRegisteredEndUserIdentifierType = {
   __typename?: 'BCIRegisteredEndUserIdentifierType',
  id: Scalars['String'],
  idScope?: Maybe<BciCodeValueType>,
  idContext?: Maybe<BciCodeValueType>,
};

export type BciSalesChannelIdentifierType = {
   __typename?: 'BCISalesChannelIdentifierType',
  id: Scalars['String'],
  idContext?: Maybe<BciCodeValueType>,
  idScope?: Maybe<BciCodeValueType>,
};

export type BciServiceDeskPartnerIdentifierType = {
   __typename?: 'BCIServiceDeskPartnerIdentifierType',
  id: Scalars['String'],
  idScope: BciCodeValueType,
  idContext: BciCodeValueType,
};

export type BciStatusType = {
   __typename?: 'BCIStatusType',
  code: BciCodeValueType,
  description?: Maybe<BciNameType>,
  reason?: Maybe<Array<Maybe<BciCodeValueType>>>,
  validFor?: Maybe<BciTimeIntervalType>,
};

export type BciTaskIdentifierType = {
   __typename?: 'BCITaskIdentifierType',
  noop?: Maybe<Scalars['String']>,
};

export type BciTelType = {
   __typename?: 'BCITelType',
  nationalNumber: Scalars['String'],
  numberingPlan?: Maybe<BciCodeValueType>,
  countryPrefix?: Maybe<BciCodeValueType>,
};

export type BciTimeIntervalType = {
   __typename?: 'BCITimeIntervalType',
  startTimeStamp: Scalars['Date'],
  endTimeStamp?: Maybe<Scalars['Date']>,
};

export type BciVisitorIdentifierType = {
   __typename?: 'BCIVisitorIdentifierType',
  id: Scalars['String'],
  idScope: BciCodeValueType,
  idContext: BciCodeValueType,
};

export type BciWorkforceQueueIdentifierType = {
   __typename?: 'BCIWorkforceQueueIdentifierType',
  id: Scalars['String'],
  idScope: BciCodeValueType,
  idContext: BciCodeValueType,
};

export type BciWorkOrderIdentifierType = {
   __typename?: 'BCIWorkOrderIdentifierType',
  id: Scalars['String'],
  idScope?: Maybe<BciCodeValueType>,
  idContext?: Maybe<BciCodeValueType>,
};

export type BillingDocumentIdentifierType = {
   __typename?: 'BillingDocumentIdentifierType',
  id: Scalars['String'],
  idScope: RqmCodeValueType,
  idContext: RqmCodeValueType,
};

export type BusinessCommunicationIdentifierType = {
   __typename?: 'BusinessCommunicationIdentifierType',
  id: Scalars['String'],
  idScope?: Maybe<RqmCodeValueType>,
  idContext?: Maybe<RqmCodeValueType>,
};

export enum BusinessInteractionKind {
  CustomerOrder = 'CustomerOrder',
  Incident = 'Incident',
  Complaint = 'Complaint',
  Lead = 'Lead'
}

export enum CacheControlScope {
  Public = 'PUBLIC',
  Private = 'PRIVATE'
}

export type ChannelIdentifierType = {
   __typename?: 'ChannelIdentifierType',
  id: Scalars['String'],
  idScope: RqmCodeValueType,
  idContext: RqmCodeValueType,
};

export type CharacteristicValueType = {
   __typename?: 'CharacteristicValueType',
  characteristicName: Scalars['String'],
  characteristicDescription?: Maybe<Scalars['String']>,
  value?: Maybe<Scalars['String']>,
  valueRange?: Maybe<IntervalType>,
  unitOfMeasure?: Maybe<RqmCodeValueType>,
  valueDescription?: Maybe<Scalars['String']>,
  validFor?: Maybe<TimeIntervalType>,
  subCharVal?: Maybe<Array<Maybe<CharacteristicValueType>>>,
};

export type ChoiceBillingDocumentIdentifierInRequestType = {
   __typename?: 'ChoiceBillingDocumentIdentifierInRequestType',
  invoiceBillingDocumentIdentifier?: Maybe<BillingDocumentIdentifierType>,
  creditNoteBillingDocumentIdentifier?: Maybe<BillingDocumentIdentifierType>,
  billingDocumentIdentifier?: Maybe<BillingDocumentIdentifierType>,
};

export type ChoiceBusinessInteractionIdentifierInputType = {
  businessInteractionKind: BusinessInteractionKind,
  id: Scalars['ID'],
  idScope?: Maybe<CodeValueInputType>,
  idContext?: Maybe<CodeValueInputType>,
};

export type ChoiceBusinessInteractionIdentifierItemInRequestType = {
   __typename?: 'ChoiceBusinessInteractionIdentifierItemInRequestType',
  customerOrderIdentifier?: Maybe<CustomerOrderIdentifierType>,
  incidentIdentifier?: Maybe<IncidentIdentifierType>,
  complaintIdentifier?: Maybe<ComplaintIdentifierUnion>,
  leadIdentifier?: Maybe<LeadIdentifierType>,
};


export type ChoiceBusinessInteractionIdentifierItemInRequestTypeComplaintIdentifierArgs = {
  unionIdentifierType?: Maybe<UnionIdentifierType>
};

export type ChoicePartyIdentifierInputType = {
  partyKind: PartyKind,
  id: Scalars['ID'],
  idScope?: Maybe<CodeValueInputType>,
  idContext?: Maybe<CodeValueInputType>,
};

export type ChoicePartyRoleIdentifierInDataManagementType = {
   __typename?: 'ChoicePartyRoleIdentifierInDataManagementType',
  employeeIdentifier?: Maybe<EmployeeIdentifierType>,
  registeredEndUserIdentifier?: Maybe<RegisteredEndUserIdentifierType>,
};

export type ChoicePartyRoleIdentifierInRequestType = {
   __typename?: 'ChoicePartyRoleIdentifierInRequestType',
  internalEmployeeIdentifier?: Maybe<InternalEmployeeIdentifierType>,
  partnerEmployeeIdentifier?: Maybe<PartnerEmployeeIdentifierType>,
  organisationIdentifier?: Maybe<OrganisationIdentifierType>,
  customerIdentifier?: Maybe<CustomerIdentifierType>,
  personIdentifier?: Maybe<PersonIdentifierType>,
  organisationalUnitIdentifier?: Maybe<OrganisationalUnitIdentifierType>,
  externalEmployeeIdentifier?: Maybe<ExternalEmployeeIdentifierType>,
  registeredEndUserIdentifier?: Maybe<RegisteredEndUserIdentifierType>,
  contactIdentifier?: Maybe<ContactIdentifierType>,
};

export type CodeValueInputType = {
  codeSystem?: Maybe<Scalars['String']>,
  codeSystemVersion?: Maybe<Scalars['String']>,
  codeDescription?: Maybe<Scalars['String']>,
  value: Scalars['String'],
  context?: Maybe<Scalars['String']>,
  valueDescription?: Maybe<NameInputType>,
};

export type CommentType = {
   __typename?: 'CommentType',
  comment: Scalars['String'],
  language: LanguageCodeIsoAlpha2Type,
  type: RqmCodeValueType,
  subject?: Maybe<Array<Maybe<RqmCodeValueType>>>,
};

export type CompetenceIdentifierType = {
   __typename?: 'CompetenceIdentifierType',
  id: Scalars['String'],
  idScope?: Maybe<RqmCodeValueType>,
  idContext?: Maybe<RqmCodeValueType>,
};

export type ComplaintIdentifierInputType = {
  id: Scalars['ID'],
  idScope?: Maybe<CodeValueInputType>,
  idContext?: Maybe<CodeValueInputType>,
};

export type ComplaintIdentifierType = {
   __typename?: 'ComplaintIdentifierType',
  id: Scalars['String'],
  idScope?: Maybe<RqmCodeValueType>,
  idContext?: Maybe<RqmCodeValueType>,
};

export type ComplaintIdentifierUnion = ComplaintIdentifierType | BciCaseType;

export type ConfigurationType = {
   __typename?: 'ConfigurationType',
  environment: Scalars['String'],
  logging: LoggingType,
  express: ExpressType,
  graphQL: GraphQlType,
  rqmClient: RqmClientType,
  bciClient: BciClientType,
  securityLayer: SecurityType,
};

export type ContactIdentifierType = {
   __typename?: 'ContactIdentifierType',
  id: Scalars['String'],
  idScope?: Maybe<RqmCodeValueType>,
  idContext?: Maybe<RqmCodeValueType>,
};

export type CustomerIdentifierInputType = {
  id: Scalars['ID'],
  idScope?: Maybe<CodeValueInputType>,
  idContext?: Maybe<CodeValueInputType>,
};

export type CustomerIdentifierType = {
   __typename?: 'CustomerIdentifierType',
  id: Scalars['String'],
  idScope?: Maybe<RqmCodeValueType>,
  idContext?: Maybe<RqmCodeValueType>,
};

export enum CustomerLanguage {
  Fr = 'FR',
  Nl = 'NL',
  De = 'DE'
}

export type CustomerOrderIdentifierInputType = {
  id: Scalars['ID'],
  idScope?: Maybe<CodeValueInputType>,
  idContext?: Maybe<CodeValueInputType>,
};

export type CustomerOrderIdentifierType = {
   __typename?: 'CustomerOrderIdentifierType',
  id: Scalars['String'],
  idScope?: Maybe<RqmCodeValueType>,
  idContext?: Maybe<RqmCodeValueType>,
};


export type EmployeeIdentifierType = {
   __typename?: 'EmployeeIdentifierType',
  id: Scalars['String'],
  idScope?: Maybe<RqmCodeValueType>,
  idContext?: Maybe<RqmCodeValueType>,
};

export type ExpressType = {
   __typename?: 'ExpressType',
  bodyLimit?: Maybe<Scalars['String']>,
};

export type ExternalEmployeeIdentifierInputType = {
  id: Scalars['ID'],
  idScope?: Maybe<CodeValueInputType>,
  idContext?: Maybe<CodeValueInputType>,
};

export type ExternalEmployeeIdentifierType = {
   __typename?: 'ExternalEmployeeIdentifierType',
  id: Scalars['String'],
  idScope?: Maybe<RqmCodeValueType>,
  idContext?: Maybe<RqmCodeValueType>,
};

export type FilterRequestActionInputType = {
  requestActionItemId?: Maybe<RequestActionItemIdentifierInputType>,
  customerLanguage?: Maybe<CustomerLanguage>,
};

export type FilterRequestInputType = {
  requestId?: Maybe<RequestIdentifierInputType>,
  customerLanguage?: Maybe<CustomerLanguage>,
};

export enum FormatType {
  Readable = 'readable',
  Fluentd = 'fluentd'
}

export type GeographicAddressIdentifierType = {
   __typename?: 'GeographicAddressIdentifierType',
  id: Scalars['String'],
  idScope: RqmCodeValueType,
  idContext: RqmCodeValueType,
};

export type GraphQlType = {
   __typename?: 'GraphQLType',
  graphQLPort: Scalars['Int'],
  graphQLDebug?: Maybe<Scalars['Boolean']>,
  graphQLTracing?: Maybe<Scalars['Boolean']>,
  graphQLIntrospection?: Maybe<Scalars['Boolean']>,
  graphQLPlayground?: Maybe<Scalars['Boolean']>,
  graphiQLPort: Scalars['Int'],
};

export type HealthDetailsType = {
   __typename?: 'HealthDetailsType',
  graphQL: HealthStatusType,
  graphiQL: HealthStatusType,
  bciCase: HealthStatusType,
  requestEntityService: HealthStatusType,
  requestOrchestratedTaskService: HealthStatusType,
  requestActionItemOrchestratedTaskService: HealthStatusType,
};

export enum HealthStatusType {
  Up = 'UP',
  Down = 'DOWN'
}

export type HealthType = {
   __typename?: 'HealthType',
  status: HealthStatusType,
  details?: Maybe<HealthDetailsType>,
};

export type IdentityType = {
   __typename?: 'IdentityType',
  msVersion: Scalars['String'],
  hostPort: Scalars['Int'],
  hostName: Scalars['String'],
  clusterName?: Maybe<Scalars['String']>,
  serverName: Scalars['String'],
  dateTime: Scalars['Date'],
  message: Scalars['String'],
  environment: Scalars['String'],
};

export type IncidentIdentifierInputType = {
  id: Scalars['ID'],
  idScope?: Maybe<CodeValueInputType>,
  idContext?: Maybe<CodeValueInputType>,
};

export type IncidentIdentifierType = {
   __typename?: 'IncidentIdentifierType',
  id: Scalars['String'],
  idScope?: Maybe<RqmCodeValueType>,
  idContext?: Maybe<RqmCodeValueType>,
};

export type InstallmentPlanIdentifierType = {
   __typename?: 'InstallmentPlanIdentifierType',
  id: Scalars['String'],
  idScope: RqmCodeValueType,
  idContext: RqmCodeValueType,
};

export type InternalEmployeeIdentifierInputType = {
  id: Scalars['ID'],
  idScope?: Maybe<CodeValueInputType>,
  idContext?: Maybe<CodeValueInputType>,
};

export type InternalEmployeeIdentifierType = {
   __typename?: 'InternalEmployeeIdentifierType',
  id: Scalars['String'],
  idScope?: Maybe<RqmCodeValueType>,
  idContext?: Maybe<RqmCodeValueType>,
};

export type IntervalType = {
   __typename?: 'IntervalType',
  low: Scalars['String'],
  high: Scalars['String'],
};

export type LabelInputType = {
  text?: Maybe<Scalars['String']>,
  language: LanguageCodeIsoAlpha2InputType,
};

export type LanguageCodeIsoAlpha2InputType = {
  alpha2Code: Scalars['String'],
  idScope?: Maybe<CodeValueInputType>,
};

export type LanguageCodeIsoAlpha2Type = {
   __typename?: 'LanguageCodeIsoAlpha2Type',
  alpha2Code: Scalars['String'],
  idScope?: Maybe<RqmCodeValueType>,
};

export type LeadIdentifierInputType = {
  id: Scalars['ID'],
  idScope?: Maybe<CodeValueInputType>,
  idContext?: Maybe<CodeValueInputType>,
};

export type LeadIdentifierType = {
   __typename?: 'LeadIdentifierType',
  id: Scalars['String'],
  idScope: RqmCodeValueType,
  idContext: RqmCodeValueType,
};

export type LoggingType = {
   __typename?: 'LoggingType',
  transports: Array<Maybe<TransportType>>,
};


export type LoggingTypeTransportsArgs = {
  type?: Maybe<TransportEnumType>
};

export type MetadataType = {
   __typename?: 'MetadataType',
  auditTrail?: Maybe<AuditTrailType>,
};

export type Mutation = {
   __typename?: 'Mutation',
  submitRequest: Array<RequestIdentifierType>,
  changeAgentRole?: Maybe<Scalars['Boolean']>,
  submitRequestActionItem: Array<RequestActionItemIdentifierType>,
  closeRequestActionItem?: Maybe<Scalars['Boolean']>,
  reSeed?: Maybe<Scalars['Boolean']>,
};


export type MutationSubmitRequestArgs = {
  partyIdentifier: ChoicePartyIdentifierInputType,
  requestorDescription: Scalars['String'],
  type?: Maybe<CodeValueInputType>,
  serviceLevel?: Maybe<CodeValueInputType>,
  contactReason?: Maybe<RequestContactReasonInputType>,
  requestorLanguage?: Maybe<LanguageCodeIsoAlpha2InputType>
};


export type MutationChangeAgentRoleArgs = {
  requestIdentifier: RequestIdentifierInputType,
  agentId: AgentIdentifierInputType,
  role?: Maybe<RoleKind>
};


export type MutationSubmitRequestActionItemArgs = {
  requestIdentifier: RequestIdentifierInputType,
  businessInteractionIdentifierItem: ChoiceBusinessInteractionIdentifierInputType
};


export type MutationCloseRequestActionItemArgs = {
  requestActionItemIdentifier: RequestActionItemIdentifierInputType
};

export type NameInputType = {
  defaultName: Scalars['String'],
  type?: Maybe<CodeValueInputType>,
  languageName?: Maybe<Array<Maybe<LabelInputType>>>,
};

export type OrganisationalUnitIdentifierType = {
   __typename?: 'OrganisationalUnitIdentifierType',
  id: Scalars['String'],
  idScope: RqmCodeValueType,
  idContext: RqmCodeValueType,
};

export type OrganisationIdentifierInputType = {
  id: Scalars['ID'],
  idScope?: Maybe<CodeValueInputType>,
  idContext?: Maybe<CodeValueInputType>,
};

export type OrganisationIdentifierType = {
   __typename?: 'OrganisationIdentifierType',
  id: Scalars['String'],
  idScope?: Maybe<RqmCodeValueType>,
  idContext?: Maybe<RqmCodeValueType>,
};

export type PageInfo = {
   __typename?: 'PageInfo',
  endCursor?: Maybe<Scalars['String']>,
  hasNextPage: Scalars['Boolean'],
};

export type PaginationInputType = {
  after?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
};

export type PartnerEmployeeIdentifierType = {
   __typename?: 'PartnerEmployeeIdentifierType',
  id: Scalars['String'],
  idScope: RqmCodeValueType,
  idContext: RqmCodeValueType,
};

export enum PartyKind {
  Organisation = 'Organisation',
  Customer = 'Customer',
  Person = 'Person'
}

export type PersonIdentifierInputType = {
  id: Scalars['ID'],
  idScope?: Maybe<CodeValueInputType>,
  idContext?: Maybe<CodeValueInputType>,
};

export type PersonIdentifierType = {
   __typename?: 'PersonIdentifierType',
  id: Scalars['String'],
  idScope?: Maybe<RqmCodeValueType>,
  idContext?: Maybe<RqmCodeValueType>,
};

export type PhysicalGoodIdentifierType = {
   __typename?: 'PhysicalGoodIdentifierType',
  id: Scalars['String'],
  idScope?: Maybe<RqmCodeValueType>,
  idContext?: Maybe<RqmCodeValueType>,
};

export type ProductSpecificationIdentifierType = {
   __typename?: 'ProductSpecificationIdentifierType',
  id: Scalars['String'],
  idContext?: Maybe<RqmCodeValueType>,
  idScope?: Maybe<RqmCodeValueType>,
};

export type PromiseToPayIdentifierType = {
   __typename?: 'PromiseToPayIdentifierType',
  id: Scalars['String'],
  idScope?: Maybe<RqmCodeValueType>,
  idContext?: Maybe<RqmCodeValueType>,
};

export type Query = {
   __typename?: 'Query',
  identity?: Maybe<IdentityType>,
  ready?: Maybe<Scalars['Boolean']>,
  health?: Maybe<HealthType>,
  config: ConfigurationType,
  requests: RequestPageResultCursor,
  requestActionItems: RequestActionItemPageResultCursor,
  request?: Maybe<RequestType>,
  requestActionItem?: Maybe<RequestActionItemType>,
};


export type QueryRequestsArgs = {
  filter?: Maybe<FilterRequestInputType>,
  pagination?: Maybe<PaginationInputType>,
  sorting?: Maybe<RequestOrderBy>
};


export type QueryRequestActionItemsArgs = {
  filter?: Maybe<FilterRequestActionInputType>,
  pagination?: Maybe<PaginationInputType>,
  sorting?: Maybe<RequestActionItemOrderBy>
};


export type QueryRequestArgs = {
  requestIdentifier: RequestIdentifierInputType,
  customerLanguage: CustomerLanguage
};


export type QueryRequestActionItemArgs = {
  requestActionItemIdentifier: RequestActionItemIdentifierInputType
};

export type RegisteredEndUserIdentifierType = {
   __typename?: 'RegisteredEndUserIdentifierType',
  id: Scalars['String'],
  idScope?: Maybe<RqmCodeValueType>,
  idContext?: Maybe<RqmCodeValueType>,
};

export type RequestActionItemEdge = {
   __typename?: 'RequestActionItemEdge',
  cursor: Scalars['String'],
  node: RequestActionItemType,
};

export type RequestActionItemIdentifierInputType = {
  id: Scalars['ID'],
  idScope?: Maybe<CodeValueInputType>,
  idContext?: Maybe<CodeValueInputType>,
};

export type RequestActionItemIdentifierType = {
   __typename?: 'RequestActionItemIdentifierType',
  id: Scalars['String'],
  idScope: RqmCodeValueType,
  idContext: RqmCodeValueType,
};

export enum RequestActionItemOrderBy {
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC'
}

export type RequestActionItemPageResultCursor = {
   __typename?: 'RequestActionItemPageResultCursor',
  edges: Array<Maybe<RequestActionItemEdge>>,
  pageInfo: PageInfo,
  totalCount: Scalars['Int'],
};

export type RequestActionItemType = {
   __typename?: 'RequestActionItemType',
  status: StatusType,
  identifier: Array<Maybe<RequestActionItemIdentifierType>>,
  description?: Maybe<Array<Maybe<Scalars['String']>>>,
  planActionDate?: Maybe<Scalars['Date']>,
  creationDate?: Maybe<Scalars['Date']>,
  lastChangeDate?: Maybe<Scalars['Date']>,
  businessInteractionIdentifierItem?: Maybe<ChoiceBusinessInteractionIdentifierItemInRequestType>,
};

export type RequestContactReasonInputType = {
  domain?: Maybe<CodeValueInputType>,
  productType?: Maybe<CodeValueInputType>,
  contactReasonCode?: Maybe<CodeValueInputType>,
};

export type RequestContactReasonType = {
   __typename?: 'RequestContactReasonType',
  domain?: Maybe<RqmCodeValueType>,
  productType?: Maybe<RqmCodeValueType>,
  contactReasonCode?: Maybe<RqmCodeValueType>,
};

export type RequestEdge = {
   __typename?: 'RequestEdge',
  cursor: Scalars['String'],
  node: RequestType,
};

export type RequestIdentifierInputType = {
  id: Scalars['ID'],
  idScope?: Maybe<CodeValueInputType>,
  idContext?: Maybe<CodeValueInputType>,
};

export type RequestIdentifierType = {
   __typename?: 'RequestIdentifierType',
  id: Scalars['String'],
  idScope: RqmCodeValueType,
  idContext: RqmCodeValueType,
};

export type RequestNonValidRequestorInputType = {
   __typename?: 'RequestNonValidRequestorInputType',
  charVal?: Maybe<Array<Maybe<CharacteristicValueType>>>,
};

export enum RequestOrderBy {
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC'
}

export type RequestPageResultCursor = {
   __typename?: 'RequestPageResultCursor',
  edges: Array<Maybe<RequestEdge>>,
  pageInfo: PageInfo,
  totalCount: Scalars['Int'],
};

export type RequestRelationshipType = {
   __typename?: 'RequestRelationshipType',
  name: RqmCodeValueType,
  requestIdentifier?: Maybe<Array<Maybe<RequestIdentifierType>>>,
};

export type RequestResolutionType = {
   __typename?: 'RequestResolutionType',
  code: RqmCodeValueType,
  detail?: Maybe<Array<Maybe<RqmCodeValueType>>>,
  resolvedByBillingDocumentIdentifier?: Maybe<Array<Maybe<ChoiceBillingDocumentIdentifierInRequestType>>>,
  promiseToPayIdentifier?: Maybe<PromiseToPayIdentifierType>,
  installmentPlanIdentifier?: Maybe<InstallmentPlanIdentifierType>,
  requestRootCause?: Maybe<RequestRootCauseType>,
  attachmentPath?: Maybe<Array<Maybe<Scalars['String']>>>,
};

export type RequestRoleType = {
   __typename?: 'RequestRoleType',
  partyRoleIdentifier: ChoicePartyRoleIdentifierInRequestType,
  name: RqmCodeValueType,
};

export type RequestRootCauseType = {
   __typename?: 'RequestRootCauseType',
  code?: Maybe<RqmCodeValueType>,
  detail?: Maybe<Array<Maybe<Scalars['String']>>>,
};

export type RequestType = {
   __typename?: 'RequestType',
  title: Scalars['String'],
  type: RqmCodeValueType,
  serviceLevel: RqmCodeValueType,
  requestorDescription?: Maybe<Scalars['String']>,
  requestorExpectation?: Maybe<Scalars['String']>,
  estimatedResolutionDate: Scalars['Date'],
  requestorComment?: Maybe<Array<Maybe<CommentType>>>,
  internalComment?: Maybe<Array<Maybe<CommentType>>>,
  numberOfTimesReopened: Scalars['Int'],
  role: Array<Maybe<RequestRoleType>>,
  identifier: Array<Maybe<RequestIdentifierType>>,
  relationship?: Maybe<Array<Maybe<RequestRelationshipType>>>,
  charVal?: Maybe<Array<Maybe<CharacteristicValueType>>>,
  preferredChannelIdentifier?: Maybe<ChannelIdentifierType>,
  resolution?: Maybe<Array<Maybe<RequestResolutionType>>>,
  internalStatus: StatusType,
  actionItem?: Maybe<Array<Maybe<RequestActionItemType>>>,
  externalStatus: StatusType,
  contactReason?: Maybe<RequestContactReasonType>,
  creationDate: Scalars['Date'],
  metadata?: Maybe<MetadataType>,
  createdFromBusinessCommunicationIdentifier: BusinessCommunicationIdentifierType,
  attachmentPath?: Maybe<Array<Maybe<Scalars['String']>>>,
  nonValidRequestorInputCharVal?: Maybe<RequestNonValidRequestorInputType>,
  requestorLanguage?: Maybe<LanguageCodeIsoAlpha2Type>,
};


export type RequestTypeRoleArgs = {
  roleKind?: Maybe<RoleKind>
};

export enum RoleKind {
  AssignedTo = 'AssignedTo',
  RequestOwner = 'RequestOwner',
  RequestedFor = 'RequestedFor'
}

export type RqmClientType = {
   __typename?: 'RqmClientType',
  esUrl: Scalars['String'],
  otsUrl: Scalars['String'],
  otsRequestActionItemUrl: Scalars['String'],
  timeoutInMillis: Scalars['Int'],
};

export type RqmCodeValueType = {
   __typename?: 'RQMCodeValueType',
  codeSystem?: Maybe<Scalars['String']>,
  codeSystemVersion?: Maybe<Scalars['String']>,
  codeDescription?: Maybe<Scalars['String']>,
  value: Scalars['String'],
  context?: Maybe<Scalars['String']>,
  valueDescription?: Maybe<RqmNameType>,
};

export type RqmLabelType = {
   __typename?: 'RQMLabelType',
  text?: Maybe<Scalars['String']>,
  language: LanguageCodeIsoAlpha2Type,
};

export type RqmNameType = {
   __typename?: 'RQMNameType',
  defaultName: Scalars['String'],
  type?: Maybe<RqmCodeValueType>,
  languageName?: Maybe<Array<Maybe<RqmLabelType>>>,
};

export type SecurityType = {
   __typename?: 'SecurityType',
  enabled: Scalars['Boolean'],
  apiVisibility?: Maybe<ApiVisibilityType>,
};

export type StatusType = {
   __typename?: 'StatusType',
  code: RqmCodeValueType,
  description?: Maybe<Scalars['String']>,
  reason?: Maybe<Array<Maybe<RqmCodeValueType>>>,
  comment?: Maybe<Array<Maybe<CommentType>>>,
  validFor?: Maybe<TimeIntervalType>,
};

export type TimeIntervalType = {
   __typename?: 'TimeIntervalType',
  startTimeStamp: Scalars['Date'],
  endTimeStamp: Scalars['Date'],
};

export type TransactionType = {
   __typename?: 'TransactionType',
  type: RqmCodeValueType,
  date: Scalars['Date'],
  reason?: Maybe<Array<Maybe<Scalars['String']>>>,
  applicationIdentifier?: Maybe<ApplicationIdentifierType>,
  committedBy?: Maybe<ChoicePartyRoleIdentifierInDataManagementType>,
};

export enum TransportEnumType {
  File = 'File',
  Console = 'Console'
}

export type TransportType = {
   __typename?: 'TransportType',
  enabled: Scalars['Boolean'],
  minLevel: Scalars['String'],
  transport: TransportEnumType,
  format?: Maybe<FormatType>,
  fileName?: Maybe<Scalars['String']>,
  dirName?: Maybe<Scalars['String']>,
  maxFiles?: Maybe<Scalars['String']>,
  maxSize?: Maybe<Scalars['String']>,
  zippedArchive?: Maybe<Scalars['Boolean']>,
};

export enum UnionIdentifierType {
  Identifier = 'IDENTIFIER',
  Type = 'TYPE'
}


export type WorkforceQueueIdentifierType = {
   __typename?: 'WorkforceQueueIdentifierType',
  id: Scalars['String'],
  idScope: RqmCodeValueType,
  idContext: RqmCodeValueType,
};

export type RequestFieldsFragment = (
  { __typename?: 'RequestType' }
  & Pick<RequestType, 'title' | 'creationDate' | 'requestorDescription'>
  & { identifier: Array<Maybe<(
    { __typename?: 'RequestIdentifierType' }
    & Pick<RequestIdentifierType, 'id'>
  )>>, internalStatus: (
    { __typename?: 'StatusType' }
    & { code: (
      { __typename?: 'RQMCodeValueType' }
      & Pick<RqmCodeValueType, 'value'>
    ) }
  ), contactReason: Maybe<(
    { __typename?: 'RequestContactReasonType' }
    & { domain: Maybe<(
      { __typename?: 'RQMCodeValueType' }
      & Pick<RqmCodeValueType, 'value'>
      & { valueDescription: Maybe<(
        { __typename?: 'RQMNameType' }
        & Pick<RqmNameType, 'defaultName'>
      )> }
    )>, productType: Maybe<(
      { __typename?: 'RQMCodeValueType' }
      & Pick<RqmCodeValueType, 'value'>
      & { valueDescription: Maybe<(
        { __typename?: 'RQMNameType' }
        & Pick<RqmNameType, 'defaultName'>
      )> }
    )>, contactReasonCode: Maybe<(
      { __typename?: 'RQMCodeValueType' }
      & Pick<RqmCodeValueType, 'value'>
      & { valueDescription: Maybe<(
        { __typename?: 'RQMNameType' }
        & Pick<RqmNameType, 'defaultName'>
      )> }
    )> }
  )>, serviceLevel: (
    { __typename?: 'RQMCodeValueType' }
    & Pick<RqmCodeValueType, 'value'>
  ), role: Array<Maybe<(
    { __typename?: 'RequestRoleType' }
    & { partyRoleIdentifier: (
      { __typename?: 'ChoicePartyRoleIdentifierInRequestType' }
      & { customerIdentifier: Maybe<(
        { __typename?: 'CustomerIdentifierType' }
        & Pick<CustomerIdentifierType, 'id'>
      )>, internalEmployeeIdentifier: Maybe<(
        { __typename?: 'InternalEmployeeIdentifierType' }
        & Pick<InternalEmployeeIdentifierType, 'id'>
      )>, externalEmployeeIdentifier: Maybe<(
        { __typename?: 'ExternalEmployeeIdentifierType' }
        & Pick<ExternalEmployeeIdentifierType, 'id'>
      )> }
    ), name: (
      { __typename?: 'RQMCodeValueType' }
      & Pick<RqmCodeValueType, 'value'>
      & { valueDescription: Maybe<(
        { __typename?: 'RQMNameType' }
        & Pick<RqmNameType, 'defaultName'>
      )> }
    ) }
  )>>, actionItem: Maybe<Array<Maybe<(
    { __typename?: 'RequestActionItemType' }
    & RequestActionItemFieldsFragment
  )>>> }
);

export type RequestActionItemFieldsFragment = (
  { __typename?: 'RequestActionItemType' }
  & Pick<RequestActionItemType, 'creationDate'>
  & { status: (
    { __typename?: 'StatusType' }
    & { code: (
      { __typename?: 'RQMCodeValueType' }
      & Pick<RqmCodeValueType, 'value'>
    ) }
  ), identifier: Array<Maybe<(
    { __typename?: 'RequestActionItemIdentifierType' }
    & Pick<RequestActionItemIdentifierType, 'id'>
  )>>, businessInteractionIdentifierItem: Maybe<(
    { __typename?: 'ChoiceBusinessInteractionIdentifierItemInRequestType' }
    & { complaintIdentifier: Maybe<(
      { __typename?: 'ComplaintIdentifierType' }
      & Pick<ComplaintIdentifierType, 'id'>
      & { idScope: Maybe<(
        { __typename?: 'RQMCodeValueType' }
        & Pick<RqmCodeValueType, 'value'>
      )>, idContext: Maybe<(
        { __typename?: 'RQMCodeValueType' }
        & Pick<RqmCodeValueType, 'value'>
      )> }
    ) | (
      { __typename?: 'BCICaseType' }
      & { title: (
        { __typename?: 'BCINameType' }
        & Pick<BciNameType, 'defaultName'>
      ), type: (
        { __typename?: 'BCICodeValueType' }
        & Pick<BciCodeValueType, 'value'>
        & { valueDescription: Maybe<(
          { __typename?: 'BCINameType' }
          & Pick<BciNameType, 'defaultName'>
        )> }
      ), identifier: (
        { __typename?: 'BCICaseIdentifierType' }
        & Pick<BciCaseIdentifierType, 'id'>
      ), description: Maybe<(
        { __typename?: 'BCINameType' }
        & Pick<BciNameType, 'defaultName'>
      )> }
    )> }
  )> }
);

export type ChangeAgentRoleWithRoleMutationVariables = {
  requestIdentifier: RequestIdentifierInputType,
  agentId: AgentIdentifierInputType,
  roleKind?: Maybe<RoleKind>
};


export type ChangeAgentRoleWithRoleMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'changeAgentRole'>
);

export type SubmitRequestActionItemMutationVariables = {
  requestIdentifier: RequestIdentifierInputType,
  businessInteractionIdentifierItem: ChoiceBusinessInteractionIdentifierInputType
};


export type SubmitRequestActionItemMutation = (
  { __typename?: 'Mutation' }
  & { submitRequestActionItem: Array<(
    { __typename?: 'RequestActionItemIdentifierType' }
    & RequestActionItemIdentifierFieldsFragment
  )> }
);

export type RequestActionItemIdentifierFieldsFragment = (
  { __typename?: 'RequestActionItemIdentifierType' }
  & Pick<RequestActionItemIdentifierType, 'id'>
  & { idScope: (
    { __typename?: 'RQMCodeValueType' }
    & Pick<RqmCodeValueType, 'value'>
  ), idContext: (
    { __typename?: 'RQMCodeValueType' }
    & Pick<RqmCodeValueType, 'value'>
  ) }
);

export type GetConfigQueryVariables = {};


export type GetConfigQuery = (
  { __typename?: 'Query' }
  & { config: (
    { __typename?: 'ConfigurationType' }
    & Pick<ConfigurationType, 'environment'>
  ) }
);

export type FetchRequestByIdQueryVariables = {
  requestId: RequestIdentifierInputType,
  customerLanguage: CustomerLanguage
};


export type FetchRequestByIdQuery = (
  { __typename?: 'Query' }
  & { request: Maybe<(
    { __typename?: 'RequestType' }
    & RequestFieldsFragment
  )> }
);

export const RequestActionItemFieldsFragmentDoc = gql`
    fragment requestActionItemFields on RequestActionItemType {
  status {
    code {
      value
    }
  }
  identifier {
    id
  }
  creationDate
  businessInteractionIdentifierItem {
    complaintIdentifier(unionIdentifierType: TYPE) {
      ... on BCICaseType {
        title {
          defaultName
        }
        type {
          value
          valueDescription {
            defaultName
          }
        }
        identifier {
          id
        }
        description {
          defaultName
        }
      }
      ... on ComplaintIdentifierType {
        id
        idScope {
          value
        }
        idContext {
          value
        }
      }
    }
  }
}
    `;
export const RequestFieldsFragmentDoc = gql`
    fragment requestFields on RequestType {
  identifier {
    id
  }
  title
  internalStatus {
    code {
      value
    }
  }
  creationDate
  contactReason {
    domain {
      value
      valueDescription {
        defaultName
      }
    }
    productType {
      value
      valueDescription {
        defaultName
      }
    }
    contactReasonCode {
      value
      valueDescription {
        defaultName
      }
    }
  }
  serviceLevel {
    value
  }
  requestorDescription
  role {
    partyRoleIdentifier {
      customerIdentifier {
        id
      }
      internalEmployeeIdentifier {
        id
      }
      externalEmployeeIdentifier {
        id
      }
    }
    name {
      value
      valueDescription {
        defaultName
      }
    }
  }
  actionItem {
    ...requestActionItemFields
  }
}
    ${RequestActionItemFieldsFragmentDoc}`;
export const RequestActionItemIdentifierFieldsFragmentDoc = gql`
    fragment requestActionItemIdentifierFields on RequestActionItemIdentifierType {
  id
  idScope {
    value
  }
  idContext {
    value
  }
}
    `;
export const ChangeAgentRoleWithRoleDocument = gql`
    mutation changeAgentRoleWithRole($requestIdentifier: RequestIdentifierInputType!, $agentId: AgentIdentifierInputType!, $roleKind: RoleKind) {
  changeAgentRole(requestIdentifier: $requestIdentifier, agentId: $agentId, role: $roleKind)
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class ChangeAgentRoleWithRoleGQL extends Apollo.Mutation<ChangeAgentRoleWithRoleMutation, ChangeAgentRoleWithRoleMutationVariables> {
    document = ChangeAgentRoleWithRoleDocument;
    
  }
export const SubmitRequestActionItemDocument = gql`
    mutation submitRequestActionItem($requestIdentifier: RequestIdentifierInputType!, $businessInteractionIdentifierItem: ChoiceBusinessInteractionIdentifierInputType!) {
  submitRequestActionItem(requestIdentifier: $requestIdentifier, businessInteractionIdentifierItem: $businessInteractionIdentifierItem) {
    ...requestActionItemIdentifierFields
  }
}
    ${RequestActionItemIdentifierFieldsFragmentDoc}`;

  @Injectable({
    providedIn: 'root'
  })
  export class SubmitRequestActionItemGQL extends Apollo.Mutation<SubmitRequestActionItemMutation, SubmitRequestActionItemMutationVariables> {
    document = SubmitRequestActionItemDocument;
    
  }
export const GetConfigDocument = gql`
    query getConfig {
  config {
    environment
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetConfigGQL extends Apollo.Query<GetConfigQuery, GetConfigQueryVariables> {
    document = GetConfigDocument;
    
  }
export const FetchRequestByIdDocument = gql`
    query fetchRequestById($requestId: RequestIdentifierInputType!, $customerLanguage: CustomerLanguage!) {
  request(requestIdentifier: $requestId, customerLanguage: $customerLanguage) {
    ...requestFields
  }
}
    ${RequestFieldsFragmentDoc}`;

  @Injectable({
    providedIn: 'root'
  })
  export class FetchRequestByIdGQL extends Apollo.Query<FetchRequestByIdQuery, FetchRequestByIdQueryVariables> {
    document = FetchRequestByIdDocument;
    
  }