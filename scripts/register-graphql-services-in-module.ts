const fs = require('fs');
const url = require('url');
const path = require('path');
const rootDir = require('app-root-path');

const generatedFilePath = path.resolve(rootDir.toString(), 'src/app/graphql/generated/graphql.ts');
const modulePath = path.resolve(rootDir.toString(), 'src/app/graphql/services/graphql-services.module.ts');

const regexToExtractServiceNames = /export\s*class\s*([a-zA-Z0-9]*)\s*extends\s*Apollo\./;

const emptyModule = `/* THIS FILE IS AUTOMATICALLY GENERATED */
/* tslint:disable */
import { NgModule } from '@angular/core';
GENERATED_SERVICE_IMPORT

@NgModule({
  imports: [],
  exports: [],
  declarations: [],
  providers: [
    GENERATED_SERVICE_DECLARATION
  ],
})
export class GraphQLServices {
}
`;

const checkFileExistence = (filePath: string): boolean => {
  return !fs.existsSync(filePath);
};

const openFile = (filePath: string): string => {
  return fs.readFileSync(filePath, {encoding: 'utf8'});
};

const saveFile = (filePath: string, fileContent: string): void => {
  fs.writeFileSync(filePath, fileContent, {encoding: 'utf8'});
};

const findServicesNames = (data: string): string[] => {
  const serviceNames = [];
  const services = data.split('@Injectable');
  if (services.length < 1) {
    return [];
  }
  services.slice(1).forEach((tt) => {
    const className = tt.match(regexToExtractServiceNames);
    if (className[1]) {
      serviceNames.push(className[1]);
    }
  });
  return serviceNames;
};

const registerServicesInGraphQLModule = (servicesNames: string[]): void => {
  let newModule = emptyModule;
  const services = servicesNames.join(', ');
  const imports = `import { ${services} } from './../generated/graphql';`;
  newModule = newModule.replace(/GENERATED_SERVICE_IMPORT/, imports);
  newModule = newModule.replace(/GENERATED_SERVICE_DECLARATION/, services);
  saveFile(modulePath, newModule);
};

try {
  checkFileExistence(generatedFilePath);
  const generatedFile: string = openFile(generatedFilePath);
  const serviceNames: string[] = findServicesNames(generatedFile);
  registerServicesInGraphQLModule(serviceNames);
  console.log('GraphQL services registered successfully');
} catch (e) {
  console.error('An error occured during the registration of GraphQL services: ', e);
}
